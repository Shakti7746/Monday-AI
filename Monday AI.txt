AIzaSyB_Jhb4eApsfYsiAtiVJXgb8srorLMNeQ0






import {GoogleGenerativeAI} from '@google/generative-ai'


  // Access your API key as an environment variable (see "Set up your API key" above)
  const genAI = new GoogleGenerativeAI("AIzaSyB_Jhb4eApsfYsiAtiVJXgb8srorLMNeQ0");
  
  async function run() {
    // The Gemini 1.5 models are versatile and work with both text-only and multimodal prompts
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash"});
  
    const prompt = "Set Your Name to jarvis"
  
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    console.log(text);
  }
  
  run();






  // import { useState } from "react";
// import "./App.css";
// // If you want to use syntax highlighting
// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
// import { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism'; // Example theme

// import { GoogleGenerativeAI } from "@google/generative-ai";

// function App() {
//   const [messages, setMessages] = useState([]); // Store all messages
//   const [prompt, setPrompt] = useState("");
//   const apiKey = "AIzaSyB_Jhb4eApsfYsiAtiVJXgb8srorLMNeQ0"; // Replace with your actual API key

//   const handleSubmit = async (event) => {
//     event.preventDefault();

//     if (prompt.trim()) {
//       // Add user's message to the chat
//       setMessages([...messages, { text: prompt, isUser: true }]);
//       setPrompt(""); // Clear the input field

//       try {
//         const genAI = new GoogleGenerativeAI(apiKey);
//         const model = genAI.getGenerativeModel({ model: "gemini-pro" }); // Replace with desired model
//         const message = await model.generateContent(prompt);
//         const responseText = await message.text(); // Properly extract the response text

//         // Check if the response contains code (e.g., starts with ``` or similar)
//         const isCode = responseText.trim().startsWith("```") && responseText.trim().endsWith("```");

//         // Add the AI's response to the chat
//         setMessages((prevMessages) => [
//           ...prevMessages,
//           { text: responseText, isUser: false, isCode },
//         ]);
//       } catch (error) {
//         console.error("Error:", error);
//         setMessages((prevMessages) => [
//           ...prevMessages,
//           { text: "An error occurred.", isUser: false },
//         ]);
//       }
//     }
//   };

//   return (
//     <div className="bg-gray-100 h-screen flex items-center justify-center">
//       <div className="container mx-auto p-4 bg-white shadow-lg rounded-lg max-w-md">
//         <div className="flex flex-col h-full">
//           <div className="flex-1 overflow-y-auto p-4">
//             {/* Chat messages */}
//             <div className="space-y-4">
//               {messages.map((message, index) => (
//                 <div
//                   key={index}
//                   className={`flex ${message.isUser ? "justify-end" : "justify-start"}`}
//                 >
//                   {message.isCode ? (
//                     <div className="w-full">
//                       <SyntaxHighlighter language="javascript" style={tomorrow}>
//                         {message.text.replace(/```/g, '')} {/* Remove ``` from the code */}
//                       </SyntaxHighlighter>
//                     </div>
//                   ) : (
//                     <div
//                       className={`${
//                         message.isUser ? "bg-blue-500 text-white" : "bg-gray-300 text-gray-900"
//                       } p-3 rounded-lg shadow-md`}
//                     >
//                       {message.text}
//                     </div>
//                   )}
//                 </div>
//               ))}
//             </div>
//           </div>
//           <form onSubmit={handleSubmit} className="flex gap-2 mt-4">
//             <input
//               type="text"
//               value={prompt}
//               onChange={(e) => setPrompt(e.target.value)}
//               placeholder="Type a message..."
//               className="bg-gray-200 rounded-full px-4 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500"
//             />
//             <button
//               type="submit"
//               className="bg-blue-500 text-white py-2 px-6 rounded-full hover:bg-blue-700"
//             >
//               Send
//             </button>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// }

// export default App;